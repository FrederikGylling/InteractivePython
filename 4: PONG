# find original code here - http://www.codeskulptor.org/#user48_T2eL31tjbjKRhxB_4.py
# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
PADDLE_SPEED = 2
BALL_SPEED_INC = 1.1
ball_vel = [0, 0]
paddle1_pos = HEIGHT / 2 # vertical position
paddle2_pos = HEIGHT / 2 # vertical position
paddle1_vel = 0 # vertical velocity
paddle2_vel = 0 # vertical velocity
score1 = 0 
score2 = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    
    ball_vel[0] = random.randrange(2,4)
    ball_vel[1] = - random.randrange(1,3)
    
    if direction == LEFT:
        ball_vel[0] = - ball_vel[0]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(random.choice([LEFT, RIGHT]))
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # bounce ball if collision with upper and lower wall
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]        
    
    # if ball hits gutter, reflect back if colision with paddle or increment score and re-spawn in direction of oponent
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS and (paddle1_pos - HALF_PAD_HEIGHT) <= ball_pos[1] <= (paddle1_pos + HALF_PAD_HEIGHT):
        ball_vel[0] = - ball_vel[0]
        ball_vel[0] *= BALL_SPEED_INC
        ball_vel[1] *= BALL_SPEED_INC
    elif ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        score2 += 1
        spawn_ball(RIGHT)
    
    if ball_pos[0] >= WIDTH - PAD_WIDTH - BALL_RADIUS and (paddle2_pos - HALF_PAD_HEIGHT) <= ball_pos[1] <= (paddle2_pos + HALF_PAD_HEIGHT):
        ball_vel[0] = - ball_vel[0]
        ball_vel[0] *= BALL_SPEED_INC
        ball_vel[1] *= BALL_SPEED_INC
    elif ball_pos[0] >= WIDTH - PAD_WIDTH - BALL_RADIUS:
        score1 += 1
        spawn_ball(LEFT)
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "red", "red")
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos + paddle1_vel >= HALF_PAD_HEIGHT and paddle1_pos + paddle1_vel <= HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos += paddle1_vel
    
    if paddle2_pos + paddle2_vel >= HALF_PAD_HEIGHT and paddle2_pos + paddle2_vel <= HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos += paddle2_vel
        
    # draw paddles
    paddle1 = canvas.draw_polygon([[0, paddle1_pos - HALF_PAD_HEIGHT],
                                   [PAD_WIDTH, paddle1_pos - HALF_PAD_HEIGHT],
                                   [PAD_WIDTH, paddle1_pos + HALF_PAD_HEIGHT],
                                   [0, paddle1_pos + HALF_PAD_HEIGHT]],
                                   1, "green", "yellow")
    paddle2 = canvas.draw_polygon([[WIDTH, paddle2_pos - HALF_PAD_HEIGHT],
                                   [WIDTH - PAD_WIDTH, paddle2_pos - HALF_PAD_HEIGHT],
                                   [WIDTH - PAD_WIDTH, paddle2_pos + HALF_PAD_HEIGHT],
                                   [WIDTH, paddle2_pos + HALF_PAD_HEIGHT]],
                                    1, "blue", "blue")
                                  
    # draw scores
    canvas.draw_text(str(score1), [WIDTH / 3 - 20, 50], 50, "yellow")
    canvas.draw_text(str(score2), [WIDTH / 3 * 2, 50], 50, "blue")
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = - PADDLE_SPEED
    
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel = PADDLE_SPEED

    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = - PADDLE_SPEED
    
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = PADDLE_SPEED

def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"] or key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0

    if key == simplegui.KEY_MAP["up"] or key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Start new game", new_game)

# start frame
new_game()
frame.start()
